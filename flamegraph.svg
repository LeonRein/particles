<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="311593030857"><g><title>[unknown] (2,016,103,746 samples, 0.65%)</title><rect x="98.7400%" y="213" width="0.6470%" height="15" fill="rgb(227,0,7)" fg:x="307666957757" fg:w="2016103746"/><text x="98.9900%" y="223.50"></text></g><g><title>[unknown] (814,897,733 samples, 0.26%)</title><rect x="99.1255%" y="197" width="0.2615%" height="15" fill="rgb(217,0,24)" fg:x="308868163770" fg:w="814897733"/><text x="99.3755%" y="207.50"></text></g><g><title>[unknown] (632,801,898 samples, 0.20%)</title><rect x="99.1839%" y="181" width="0.2031%" height="15" fill="rgb(221,193,54)" fg:x="309050259605" fg:w="632801898"/><text x="99.4339%" y="191.50"></text></g><g><title>[unknown] (609,750,179 samples, 0.20%)</title><rect x="99.1913%" y="165" width="0.1957%" height="15" fill="rgb(248,212,6)" fg:x="309073311324" fg:w="609750179"/><text x="99.4413%" y="175.50"></text></g><g><title>[unknown] (542,947,834 samples, 0.17%)</title><rect x="99.2128%" y="149" width="0.1742%" height="15" fill="rgb(208,68,35)" fg:x="309140113669" fg:w="542947834"/><text x="99.4628%" y="159.50"></text></g><g><title>&lt;F as scoped_threadpool::FnBox&gt;::call_box (309,469,964,536 samples, 99.32%)</title><rect x="0.0726%" y="229" width="99.3186%" height="15" fill="rgb(232,128,0)" fg:x="226208102" fg:w="309469964536"/><text x="0.3226%" y="239.50">&lt;F as scoped_threadpool::FnBox&gt;::call_box</text></g><g><title>__rust_dealloc (34,548,808 samples, 0.01%)</title><rect x="99.3961%" y="229" width="0.0111%" height="15" fill="rgb(207,160,47)" fg:x="309711384694" fg:w="34548808"/><text x="99.6461%" y="239.50"></text></g><g><title>cfree (183,744,711 samples, 0.06%)</title><rect x="99.4072%" y="229" width="0.0590%" height="15" fill="rgb(228,23,34)" fg:x="309745933502" fg:w="183744711"/><text x="99.6572%" y="239.50"></text></g><g><title>[libc.so.6] (105,017,936 samples, 0.03%)</title><rect x="99.4325%" y="213" width="0.0337%" height="15" fill="rgb(218,30,26)" fg:x="309824660277" fg:w="105017936"/><text x="99.6825%" y="223.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (291,538,015 samples, 0.09%)</title><rect x="99.4662%" y="229" width="0.0936%" height="15" fill="rgb(220,122,19)" fg:x="309929678213" fg:w="291538015"/><text x="99.7162%" y="239.50"></text></g><g><title>cfree (32,387,168 samples, 0.01%)</title><rect x="99.5493%" y="213" width="0.0104%" height="15" fill="rgb(250,228,42)" fg:x="310188829060" fg:w="32387168"/><text x="99.7993%" y="223.50"></text></g><g><title>[libc.so.6] (32,387,168 samples, 0.01%)</title><rect x="99.5493%" y="197" width="0.0104%" height="15" fill="rgb(240,193,28)" fg:x="310188829060" fg:w="32387168"/><text x="99.7993%" y="207.50"></text></g><g><title>std::sync::mpmc::zero::Channel&lt;T&gt;::recv::_{{closure}} (42,270,984 samples, 0.01%)</title><rect x="99.5612%" y="213" width="0.0136%" height="15" fill="rgb(216,20,37)" fg:x="310225911432" fg:w="42270984"/><text x="99.8112%" y="223.50"></text></g><g><title>std::thread::Thread::park (31,762,742 samples, 0.01%)</title><rect x="99.5646%" y="197" width="0.0102%" height="15" fill="rgb(206,188,39)" fg:x="310236419674" fg:w="31762742"/><text x="99.8146%" y="207.50"></text></g><g><title>std::sync::mpmc::zero::Channel&lt;T&gt;::recv (46,968,531 samples, 0.02%)</title><rect x="99.5597%" y="229" width="0.0151%" height="15" fill="rgb(217,207,13)" fg:x="310221216228" fg:w="46968531"/><text x="99.8097%" y="239.50"></text></g><g><title>std::sync::mpmc::zero::Channel&lt;T&gt;::send (40,122,996 samples, 0.01%)</title><rect x="99.5748%" y="229" width="0.0129%" height="15" fill="rgb(231,73,38)" fg:x="310268184759" fg:w="40122996"/><text x="99.8248%" y="239.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (88,392,805 samples, 0.03%)</title><rect x="99.5877%" y="229" width="0.0284%" height="15" fill="rgb(225,20,46)" fg:x="310308307755" fg:w="88392805"/><text x="99.8377%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (310,390,320,042 samples, 99.61%)</title><rect x="0.0038%" y="261" width="99.6140%" height="15" fill="rgb(210,31,41)" fg:x="11914207" fg:w="310390320042"/><text x="0.2538%" y="271.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (310,390,304,602 samples, 99.61%)</title><rect x="0.0038%" y="245" width="99.6140%" height="15" fill="rgb(221,200,47)" fg:x="11929647" fg:w="310390304602"/><text x="0.2538%" y="255.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>[libc.so.6] (310,390,362,652 samples, 99.61%)</title><rect x="0.0038%" y="293" width="99.6140%" height="15" fill="rgb(226,26,5)" fg:x="11900356" fg:w="310390362652"/><text x="0.2538%" y="303.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (310,390,348,801 samples, 99.61%)</title><rect x="0.0038%" y="277" width="99.6140%" height="15" fill="rgb(249,33,26)" fg:x="11914207" fg:w="310390348801"/><text x="0.2538%" y="287.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>[libc.so.6] (310,390,366,827 samples, 99.61%)</title><rect x="0.0038%" y="309" width="99.6140%" height="15" fill="rgb(235,183,28)" fg:x="11899698" fg:w="310390366827"/><text x="0.2538%" y="319.50">[libc.so.6]</text></g><g><title>particles::particles::Particles::new (177,226,971 samples, 0.06%)</title><rect x="99.6195%" y="181" width="0.0569%" height="15" fill="rgb(221,5,38)" fg:x="310407415958" fg:w="177226971"/><text x="99.8695%" y="191.50"></text></g><g><title>rand::rng::Rng::gen_range (152,025,745 samples, 0.05%)</title><rect x="99.6276%" y="165" width="0.0488%" height="15" fill="rgb(247,18,42)" fg:x="310432617184" fg:w="152025745"/><text x="99.8776%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (85,322,986 samples, 0.03%)</title><rect x="99.6490%" y="149" width="0.0274%" height="15" fill="rgb(241,131,45)" fg:x="310499319943" fg:w="85322986"/><text x="99.8990%" y="159.50"></text></g><g><title>calloop::loop_logic::EventLoop&lt;Data&gt;::dispatch (50,773,080 samples, 0.02%)</title><rect x="99.6779%" y="149" width="0.0163%" height="15" fill="rgb(249,31,29)" fg:x="310589381300" fg:w="50773080"/><text x="99.9279%" y="159.50"></text></g><g><title>[libc.so.6] (163,434,955 samples, 0.05%)</title><rect x="99.6985%" y="117" width="0.0525%" height="15" fill="rgb(225,111,53)" fg:x="310653644143" fg:w="163434955"/><text x="99.9485%" y="127.50"></text></g><g><title>[unknown] (98,532,439 samples, 0.03%)</title><rect x="99.7194%" y="101" width="0.0316%" height="15" fill="rgb(238,160,17)" fg:x="310718546659" fg:w="98532439"/><text x="99.9694%" y="111.50"></text></g><g><title>[unknown] (59,581,837 samples, 0.02%)</title><rect x="99.7319%" y="85" width="0.0191%" height="15" fill="rgb(214,148,48)" fg:x="310757497261" fg:w="59581837"/><text x="99.9819%" y="95.50"></text></g><g><title>[unknown] (59,581,837 samples, 0.02%)</title><rect x="99.7319%" y="69" width="0.0191%" height="15" fill="rgb(232,36,49)" fg:x="310757497261" fg:w="59581837"/><text x="99.9819%" y="79.50"></text></g><g><title>[unknown] (59,581,837 samples, 0.02%)</title><rect x="99.7319%" y="53" width="0.0191%" height="15" fill="rgb(209,103,24)" fg:x="310757497261" fg:w="59581837"/><text x="99.9819%" y="63.50"></text></g><g><title>[unknown] (36,483,364 samples, 0.01%)</title><rect x="99.7393%" y="37" width="0.0117%" height="15" fill="rgb(229,88,8)" fg:x="310780595734" fg:w="36483364"/><text x="99.9893%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (225,936,542 samples, 0.07%)</title><rect x="99.6971%" y="133" width="0.0725%" height="15" fill="rgb(213,181,19)" fg:x="310649293587" fg:w="225936542"/><text x="99.9471%" y="143.50"></text></g><g><title>__libc_calloc (58,151,031 samples, 0.02%)</title><rect x="99.7510%" y="117" width="0.0187%" height="15" fill="rgb(254,191,54)" fg:x="310817079098" fg:w="58151031"/><text x="100.0010%" y="127.50"></text></g><g><title>[libc.so.6] (37,554,052 samples, 0.01%)</title><rect x="99.7576%" y="101" width="0.0121%" height="15" fill="rgb(241,83,37)" fg:x="310837676077" fg:w="37554052"/><text x="100.0076%" y="111.50"></text></g><g><title>[libc.so.6] (33,011,859 samples, 0.01%)</title><rect x="99.7590%" y="85" width="0.0106%" height="15" fill="rgb(233,36,39)" fg:x="310842218270" fg:w="33011859"/><text x="100.0090%" y="95.50"></text></g><g><title>[libc.so.6] (460,874,284 samples, 0.15%)</title><rect x="99.7769%" y="133" width="0.1479%" height="15" fill="rgb(226,3,54)" fg:x="310897829933" fg:w="460874284"/><text x="100.0269%" y="143.50"></text></g><g><title>malloc (44,577,887 samples, 0.01%)</title><rect x="99.9323%" y="101" width="0.0143%" height="15" fill="rgb(245,192,40)" fg:x="311382163342" fg:w="44577887"/><text x="100.1823%" y="111.50"></text></g><g><title>[libc.so.6] (35,978,116 samples, 0.01%)</title><rect x="99.9351%" y="85" width="0.0115%" height="15" fill="rgb(238,167,29)" fg:x="311390763113" fg:w="35978116"/><text x="100.1851%" y="95.50"></text></g><g><title>particles::particles::Particles::update (143,705,421 samples, 0.05%)</title><rect x="99.9281%" y="133" width="0.0461%" height="15" fill="rgb(232,182,51)" fg:x="311369042021" fg:w="143705421"/><text x="100.1781%" y="143.50"></text></g><g><title>scoped_threadpool::Pool::scoped (138,886,742 samples, 0.04%)</title><rect x="99.9297%" y="117" width="0.0446%" height="15" fill="rgb(231,60,39)" fg:x="311373860700" fg:w="138886742"/><text x="100.1797%" y="127.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (63,686,032 samples, 0.02%)</title><rect x="99.9538%" y="101" width="0.0204%" height="15" fill="rgb(208,69,12)" fg:x="311449061410" fg:w="63686032"/><text x="100.2038%" y="111.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (63,686,032 samples, 0.02%)</title><rect x="99.9538%" y="85" width="0.0204%" height="15" fill="rgb(235,93,37)" fg:x="311449061410" fg:w="63686032"/><text x="100.2038%" y="95.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (926,129,714 samples, 0.30%)</title><rect x="99.6942%" y="149" width="0.2972%" height="15" fill="rgb(213,116,39)" fg:x="310640154380" fg:w="926129714"/><text x="99.9442%" y="159.50"></text></g><g><title>scoped_threadpool::Pool::scoped (53,536,652 samples, 0.02%)</title><rect x="99.9742%" y="133" width="0.0172%" height="15" fill="rgb(222,207,29)" fg:x="311512747442" fg:w="53536652"/><text x="100.2242%" y="143.50"></text></g><g><title>_start (1,176,432,942 samples, 0.38%)</title><rect x="99.6195%" y="309" width="0.3776%" height="15" fill="rgb(206,96,30)" fg:x="310407415958" fg:w="1176432942"/><text x="99.8695%" y="319.50"></text></g><g><title>__libc_start_main (1,176,432,942 samples, 0.38%)</title><rect x="99.6195%" y="293" width="0.3776%" height="15" fill="rgb(218,138,4)" fg:x="310407415958" fg:w="1176432942"/><text x="99.8695%" y="303.50"></text></g><g><title>[libc.so.6] (1,176,432,942 samples, 0.38%)</title><rect x="99.6195%" y="277" width="0.3776%" height="15" fill="rgb(250,191,14)" fg:x="310407415958" fg:w="1176432942"/><text x="99.8695%" y="287.50"></text></g><g><title>main (1,176,432,942 samples, 0.38%)</title><rect x="99.6195%" y="261" width="0.3776%" height="15" fill="rgb(239,60,40)" fg:x="310407415958" fg:w="1176432942"/><text x="99.8695%" y="271.50"></text></g><g><title>std::rt::lang_start_internal (1,176,432,942 samples, 0.38%)</title><rect x="99.6195%" y="245" width="0.3776%" height="15" fill="rgb(206,27,48)" fg:x="310407415958" fg:w="1176432942"/><text x="99.8695%" y="255.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h6cb5b76351f7025aE.llvm.15997316269463342680 (1,176,432,942 samples, 0.38%)</title><rect x="99.6195%" y="229" width="0.3776%" height="15" fill="rgb(225,35,8)" fg:x="310407415958" fg:w="1176432942"/><text x="99.8695%" y="239.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,176,432,942 samples, 0.38%)</title><rect x="99.6195%" y="213" width="0.3776%" height="15" fill="rgb(250,213,24)" fg:x="310407415958" fg:w="1176432942"/><text x="99.8695%" y="223.50"></text></g><g><title>particles::app_softbuffer::run (1,176,432,942 samples, 0.38%)</title><rect x="99.6195%" y="197" width="0.3776%" height="15" fill="rgb(247,123,22)" fg:x="310407415958" fg:w="1176432942"/><text x="99.8695%" y="207.50"></text></g><g><title>winit::platform_impl::linux::wayland::event_loop::EventLoop&lt;T&gt;::run_on_demand (999,205,971 samples, 0.32%)</title><rect x="99.6764%" y="181" width="0.3207%" height="15" fill="rgb(231,138,38)" fg:x="310584642929" fg:w="999205971"/><text x="99.9264%" y="191.50"></text></g><g><title>winit::platform_impl::linux::wayland::event_loop::EventLoop&lt;T&gt;::pump_events (999,205,971 samples, 0.32%)</title><rect x="99.6764%" y="165" width="0.3207%" height="15" fill="rgb(231,145,46)" fg:x="310584642929" fg:w="999205971"/><text x="99.9264%" y="175.50"></text></g><g><title>all (311,593,030,857 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="311593030857"/><text x="0.2500%" y="351.50"></text></g><g><title>particles (311,581,193,614 samples, 100.00%)</title><rect x="0.0038%" y="325" width="99.9962%" height="15" fill="rgb(217,147,25)" fg:x="11837243" fg:w="311581193614"/><text x="0.2538%" y="335.50">particles</text></g></svg></svg>